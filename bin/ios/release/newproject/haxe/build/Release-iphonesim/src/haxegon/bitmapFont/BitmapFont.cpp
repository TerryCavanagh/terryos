#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__List_ListIterator
#include <_List/ListIterator.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasAttribAccess
#include <haxe/xml/_Fast/HasAttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess
#include <haxe/xml/_Fast/NodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess
#include <haxe/xml/_Fast/NodeListAccess.h>
#endif
#ifndef INCLUDED_haxegon_bitmapFont_BitmapFont
#include <haxegon/bitmapFont/BitmapFont.h>
#endif
#ifndef INCLUDED_haxegon_bitmapFont_BitmapGlyphCollection
#include <haxegon/bitmapFont/BitmapGlyphCollection.h>
#endif
#ifndef INCLUDED_haxegon_bitmapFont_BitmapGlyphFrame
#include <haxegon/bitmapFont/BitmapGlyphFrame.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
namespace haxegon{
namespace bitmapFont{

Void BitmapFont_obj::__construct(::String name,::openfl::display::BitmapData bitmap)
{
HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","new",0xfa898172,"haxegon.bitmapFont.BitmapFont.new","haxegon/bitmapFont/BitmapFont.hx",19,0x0e43809e)
HX_STACK_THIS(this)
HX_STACK_ARG(name,"name")
HX_STACK_ARG(bitmap,"bitmap")
{
	HX_STACK_LINE(164)
	this->spaceWidth = (int)0;
	HX_STACK_LINE(159)
	this->minOffsetX = (int)0;
	HX_STACK_LINE(151)
	this->italic = false;
	HX_STACK_LINE(149)
	this->bold = false;
	HX_STACK_LINE(147)
	this->lineHeight = (int)0;
	HX_STACK_LINE(145)
	this->size = (int)0;
	HX_STACK_LINE(182)
	this->bitmap = bitmap;
	HX_STACK_LINE(183)
	this->fontName = name;
	HX_STACK_LINE(187)
	::haxe::ds::IntMap tmp;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(187)
	{
		HX_STACK_LINE(187)
		::haxe::ds::IntMap tmp1 = ::haxe::ds::IntMap_obj::__new();		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(187)
		::haxe::ds::IntMap tmp2 = tmp1;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(187)
		tmp = tmp2;
	}
	HX_STACK_LINE(187)
	this->glyphs = tmp;
	HX_STACK_LINE(188)
	::String tmp1 = name;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(188)
	::haxegon::bitmapFont::BitmapFont_obj::store(tmp1,hx::ObjectPtr<OBJ_>(this));
}
;
	return null();
}

//BitmapFont_obj::~BitmapFont_obj() { }

Dynamic BitmapFont_obj::__CreateEmpty() { return  new BitmapFont_obj; }
hx::ObjectPtr< BitmapFont_obj > BitmapFont_obj::__new(::String name,::openfl::display::BitmapData bitmap)
{  hx::ObjectPtr< BitmapFont_obj > _result_ = new BitmapFont_obj();
	_result_->__construct(name,bitmap);
	return _result_;}

Dynamic BitmapFont_obj::__Create(hx::DynamicArray inArgs)
{  hx::ObjectPtr< BitmapFont_obj > _result_ = new BitmapFont_obj();
	_result_->__construct(inArgs[0],inArgs[1]);
	return _result_;}

Void BitmapFont_obj::dispose( ){
{
		HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","dispose",0xbde522b1,"haxegon.bitmapFont.BitmapFont.dispose","haxegon/bitmapFont/BitmapFont.hx",196,0x0e43809e)
		HX_STACK_THIS(this)
		HX_STACK_LINE(197)
		::openfl::display::BitmapData tmp = this->bitmap;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(197)
		bool tmp1 = (tmp != null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(197)
		if ((tmp1)){
			HX_STACK_LINE(199)
			::openfl::display::BitmapData tmp2 = this->bitmap;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(199)
			tmp2->dispose();
		}
		HX_STACK_LINE(202)
		this->bitmap = null();
		HX_STACK_LINE(206)
		this->glyphs = null();
		HX_STACK_LINE(207)
		this->fontName = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,dispose,(void))

Void BitmapFont_obj::addGlyphFrame( int charCode,::openfl::geom::Rectangle frame,hx::Null< int >  __o_offsetX,hx::Null< int >  __o_offsetY,hx::Null< int >  __o_xAdvance){
int offsetX = __o_offsetX.Default(0);
int offsetY = __o_offsetY.Default(0);
int xAdvance = __o_xAdvance.Default(0);
	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","addGlyphFrame",0xb5629ff4,"haxegon.bitmapFont.BitmapFont.addGlyphFrame","haxegon/bitmapFont/BitmapFont.hx",527,0x0e43809e)
	HX_STACK_THIS(this)
	HX_STACK_ARG(charCode,"charCode")
	HX_STACK_ARG(frame,"frame")
	HX_STACK_ARG(offsetX,"offsetX")
	HX_STACK_ARG(offsetY,"offsetY")
	HX_STACK_ARG(xAdvance,"xAdvance")
{
		HX_STACK_LINE(528)
		bool tmp = (frame->width == (int)0);		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(528)
		bool tmp1 = !(tmp);		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(528)
		bool tmp2 = tmp1;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(528)
		bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(528)
		if ((tmp2)){
			HX_STACK_LINE(528)
			tmp3 = (frame->height == (int)0);
		}
		else{
			HX_STACK_LINE(528)
			tmp3 = true;
		}
		HX_STACK_LINE(528)
		bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(528)
		bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(528)
		if ((tmp4)){
			HX_STACK_LINE(528)
			::haxe::ds::IntMap tmp6 = this->glyphs;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(528)
			::haxe::ds::IntMap tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(528)
			int tmp8 = charCode;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(528)
			int tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(528)
			::haxegon::bitmapFont::BitmapGlyphFrame tmp10 = tmp7->get(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(528)
			::haxegon::bitmapFont::BitmapGlyphFrame tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(528)
			::haxegon::bitmapFont::BitmapGlyphFrame tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(528)
			tmp5 = (tmp12 != null());
		}
		else{
			HX_STACK_LINE(528)
			tmp5 = true;
		}
		HX_STACK_LINE(528)
		if ((tmp5)){
			HX_STACK_LINE(528)
			return null();
		}
		HX_STACK_LINE(530)
		::haxegon::bitmapFont::BitmapGlyphFrame tmp6 = ::haxegon::bitmapFont::BitmapGlyphFrame_obj::__new(hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(530)
		::haxegon::bitmapFont::BitmapGlyphFrame glyphFrame = tmp6;		HX_STACK_VAR(glyphFrame,"glyphFrame");
		HX_STACK_LINE(531)
		glyphFrame->charCode = charCode;
		HX_STACK_LINE(532)
		glyphFrame->xoffset = offsetX;
		HX_STACK_LINE(533)
		glyphFrame->yoffset = offsetY;
		HX_STACK_LINE(534)
		glyphFrame->xadvance = xAdvance;
		HX_STACK_LINE(535)
		glyphFrame->rect = frame;
		HX_STACK_LINE(541)
		::haxe::ds::IntMap tmp7 = this->glyphs;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(541)
		int tmp8 = charCode;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(541)
		::haxegon::bitmapFont::BitmapGlyphFrame tmp9 = glyphFrame;		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(541)
		tmp7->set(tmp8,tmp9);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC5(BitmapFont_obj,addGlyphFrame,(void))

::haxegon::bitmapFont::BitmapGlyphCollection BitmapFont_obj::prepareGlyphs( Float scale,int color,hx::Null< bool >  __o_useColor,hx::Null< bool >  __o_smoothing){
bool useColor = __o_useColor.Default(true);
bool smoothing = __o_smoothing.Default(false);
	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","prepareGlyphs",0xfadfd9c0,"haxegon.bitmapFont.BitmapFont.prepareGlyphs","haxegon/bitmapFont/BitmapFont.hx",555,0x0e43809e)
	HX_STACK_THIS(this)
	HX_STACK_ARG(scale,"scale")
	HX_STACK_ARG(color,"color")
	HX_STACK_ARG(useColor,"useColor")
	HX_STACK_ARG(smoothing,"smoothing")
{
		HX_STACK_LINE(556)
		::haxegon::bitmapFont::BitmapGlyphCollection tmp = ::haxegon::bitmapFont::BitmapGlyphCollection_obj::__new(hx::ObjectPtr<OBJ_>(this),scale,color,useColor,smoothing);		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(556)
		return tmp;
	}
}


HX_DEFINE_DYNAMIC_FUNC4(BitmapFont_obj,prepareGlyphs,return )

int BitmapFont_obj::spaceCode;

int BitmapFont_obj::tabCode;

int BitmapFont_obj::newLineCode;

::String BitmapFont_obj::defaultFontKey;

::String BitmapFont_obj::defaultFontData;

::haxe::ds::StringMap BitmapFont_obj::fonts;

Void BitmapFont_obj::store( ::String fontKey,::haxegon::bitmapFont::BitmapFont font){
{
		HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","store",0xbbe7ad73,"haxegon.bitmapFont.BitmapFont.store","haxegon/bitmapFont/BitmapFont.hx",37,0x0e43809e)
		HX_STACK_ARG(fontKey,"fontKey")
		HX_STACK_ARG(font,"font")
		HX_STACK_LINE(38)
		::haxe::ds::StringMap tmp = ::haxegon::bitmapFont::BitmapFont_obj::fonts;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(38)
		::String tmp1 = fontKey;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(38)
		bool tmp2 = tmp->exists(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(38)
		bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(38)
		if ((tmp3)){
			HX_STACK_LINE(40)
			::haxe::ds::StringMap tmp4 = ::haxegon::bitmapFont::BitmapFont_obj::fonts;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(40)
			::String tmp5 = fontKey;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(40)
			::haxegon::bitmapFont::BitmapFont tmp6 = font;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(40)
			tmp4->set(tmp5,tmp6);
		}
	}
return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapFont_obj,store,(void))

::haxegon::bitmapFont::BitmapFont BitmapFont_obj::get( ::String fontKey){
	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","get",0xfa8431a8,"haxegon.bitmapFont.BitmapFont.get","haxegon/bitmapFont/BitmapFont.hx",50,0x0e43809e)
	HX_STACK_ARG(fontKey,"fontKey")
	HX_STACK_LINE(51)
	::haxe::ds::StringMap tmp = ::haxegon::bitmapFont::BitmapFont_obj::fonts;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(51)
	::String tmp1 = fontKey;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(51)
	::haxegon::bitmapFont::BitmapFont tmp2 = tmp->get(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(51)
	::haxegon::bitmapFont::BitmapFont tmp3 = tmp2;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(51)
	return tmp3;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,get,return )

Void BitmapFont_obj::remove( ::String fontKey){
{
		HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","remove",0xa41d6272,"haxegon.bitmapFont.BitmapFont.remove","haxegon/bitmapFont/BitmapFont.hx",59,0x0e43809e)
		HX_STACK_ARG(fontKey,"fontKey")
		HX_STACK_LINE(60)
		::haxe::ds::StringMap tmp = ::haxegon::bitmapFont::BitmapFont_obj::fonts;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(60)
		::String tmp1 = fontKey;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(60)
		::haxegon::bitmapFont::BitmapFont tmp2 = tmp->get(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(60)
		::haxegon::bitmapFont::BitmapFont font = tmp2;		HX_STACK_VAR(font,"font");
		HX_STACK_LINE(61)
		::haxe::ds::StringMap tmp3 = ::haxegon::bitmapFont::BitmapFont_obj::fonts;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(61)
		::String tmp4 = fontKey;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(61)
		tmp3->remove(tmp4);
		HX_STACK_LINE(63)
		bool tmp5 = (font != null());		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(63)
		if ((tmp5)){
			HX_STACK_LINE(65)
			font->dispose();
		}
	}
return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,remove,(void))

Void BitmapFont_obj::clearFonts( ){
{
		HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","clearFonts",0xa67a6c25,"haxegon.bitmapFont.BitmapFont.clearFonts","haxegon/bitmapFont/BitmapFont.hx",73,0x0e43809e)
		HX_STACK_LINE(74)
		::haxe::ds::StringMap tmp = ::haxegon::bitmapFont::BitmapFont_obj::fonts;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(74)
		Dynamic tmp1 = tmp->iterator();		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(74)
		for(::cpp::FastIterator_obj< ::haxegon::bitmapFont::BitmapFont > *__it = ::cpp::CreateFastIterator< ::haxegon::bitmapFont::BitmapFont >(tmp1);  __it->hasNext(); ){
			::haxegon::bitmapFont::BitmapFont font = __it->next();
			font->dispose();
		}
		HX_STACK_LINE(79)
		::haxe::ds::StringMap tmp2;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(79)
		{
			HX_STACK_LINE(79)
			::haxe::ds::StringMap tmp3 = ::haxe::ds::StringMap_obj::__new();		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(79)
			::haxe::ds::StringMap tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(79)
			tmp2 = tmp4;
		}
		HX_STACK_LINE(79)
		::haxegon::bitmapFont::BitmapFont_obj::fonts = tmp2;
	}
return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,clearFonts,(void))

::haxegon::bitmapFont::BitmapFont BitmapFont_obj::getDefaultFont( ){
	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","getDefaultFont",0x8f494e68,"haxegon.bitmapFont.BitmapFont.getDefaultFont","haxegon/bitmapFont/BitmapFont.hx",86,0x0e43809e)
	HX_STACK_LINE(87)
	::haxegon::bitmapFont::BitmapFont tmp = ::haxegon::bitmapFont::BitmapFont_obj::get(HX_HCSTRING("defaultFontKey","\x4f","\x88","\x64","\xc5"));		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(87)
	::haxegon::bitmapFont::BitmapFont font = tmp;		HX_STACK_VAR(font,"font");
	HX_STACK_LINE(89)
	bool tmp1 = (font != null());		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(89)
	if ((tmp1)){
		HX_STACK_LINE(91)
		::haxegon::bitmapFont::BitmapFont tmp2 = font;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(91)
		return tmp2;
	}
	HX_STACK_LINE(94)
	::String letters = HX_HCSTRING("","\x00","\x00","\x00","\x00");		HX_STACK_VAR(letters,"letters");
	HX_STACK_LINE(95)
	::openfl::display::BitmapData tmp2 = ::openfl::display::BitmapData_obj::__new((int)700,(int)9,true,(int)-7829368);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(95)
	::openfl::display::BitmapData bd = tmp2;		HX_STACK_VAR(bd,"bd");
	HX_STACK_LINE(97)
	int letterPos = (int)0;		HX_STACK_VAR(letterPos,"letterPos");
	HX_STACK_LINE(98)
	int i = (int)0;		HX_STACK_VAR(i,"i");
	HX_STACK_LINE(100)
	while((true)){
		HX_STACK_LINE(100)
		int tmp3 = i;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(100)
		int tmp4 = HX_HCSTRING(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000","\xb9","\xed","\x10","\x8a").length;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(100)
		bool tmp5 = (tmp3 < tmp4);		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(100)
		bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(100)
		if ((tmp6)){
			HX_STACK_LINE(100)
			break;
		}
		HX_STACK_LINE(102)
		int tmp7 = i;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(102)
		::String tmp8 = HX_HCSTRING(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000","\xb9","\xed","\x10","\x8a").substr(tmp7,(int)1);		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(102)
		hx::AddEq(letters,tmp8);
		HX_STACK_LINE(104)
		int tmp9 = ++(i);		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(104)
		::String tmp10 = HX_HCSTRING(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000","\xb9","\xed","\x10","\x8a").substr(tmp9,(int)1);		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(104)
		Dynamic tmp11 = ::Std_obj::parseInt(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
		HX_STACK_LINE(104)
		int gw = tmp11;		HX_STACK_VAR(gw,"gw");
		HX_STACK_LINE(105)
		int tmp12 = ++(i);		HX_STACK_VAR(tmp12,"tmp12");
		HX_STACK_LINE(105)
		::String tmp13 = HX_HCSTRING(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000","\xb9","\xed","\x10","\x8a").substr(tmp12,(int)1);		HX_STACK_VAR(tmp13,"tmp13");
		HX_STACK_LINE(105)
		Dynamic tmp14 = ::Std_obj::parseInt(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
		HX_STACK_LINE(105)
		int gh = tmp14;		HX_STACK_VAR(gh,"gh");
		HX_STACK_LINE(107)
		{
			HX_STACK_LINE(107)
			int _g = (int)0;		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(107)
			while((true)){
				HX_STACK_LINE(107)
				bool tmp15 = (_g < gh);		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(107)
				bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(107)
				if ((tmp16)){
					HX_STACK_LINE(107)
					break;
				}
				HX_STACK_LINE(107)
				int tmp17 = (_g)++;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(107)
				int py = tmp17;		HX_STACK_VAR(py,"py");
				HX_STACK_LINE(109)
				{
					HX_STACK_LINE(109)
					int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
					HX_STACK_LINE(109)
					while((true)){
						HX_STACK_LINE(109)
						bool tmp18 = (_g1 < gw);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(109)
						bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(109)
						if ((tmp19)){
							HX_STACK_LINE(109)
							break;
						}
						HX_STACK_LINE(109)
						int tmp20 = (_g1)++;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(109)
						int px = tmp20;		HX_STACK_VAR(px,"px");
						HX_STACK_LINE(111)
						(i)++;
						HX_STACK_LINE(113)
						int tmp21 = i;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(113)
						::String tmp22 = HX_HCSTRING(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000","\xb9","\xed","\x10","\x8a").substr(tmp21,(int)1);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(113)
						bool tmp23 = (tmp22 == HX_HCSTRING("1","\x31","\x00","\x00","\x00"));		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(113)
						if ((tmp23)){
							HX_STACK_LINE(115)
							int tmp24 = (letterPos * (int)7);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(115)
							int tmp25 = ((int)1 + tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(115)
							int tmp26 = px;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(115)
							int tmp27 = (tmp25 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(115)
							int tmp28 = ((int)1 + py);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(115)
							bd->setPixel32(tmp27,tmp28,(int)-1);
						}
						else{
							HX_STACK_LINE(119)
							int tmp24 = (letterPos * (int)7);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(119)
							int tmp25 = ((int)1 + tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(119)
							int tmp26 = px;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(119)
							int tmp27 = (tmp25 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(119)
							int tmp28 = ((int)1 + py);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(119)
							bd->setPixel32(tmp27,tmp28,(int)0);
						}
					}
				}
			}
		}
		HX_STACK_LINE(124)
		(i)++;
		HX_STACK_LINE(125)
		(letterPos)++;
	}
	HX_STACK_LINE(128)
	::openfl::display::BitmapData tmp3 = bd;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(128)
	::String tmp4 = letters;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(128)
	::haxegon::bitmapFont::BitmapFont tmp5 = ::haxegon::bitmapFont::BitmapFont_obj::fromXNA(HX_HCSTRING("defaultFontKey","\x4f","\x88","\x64","\xc5"),tmp3,tmp4,null());		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(128)
	return tmp5;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,getDefaultFont,return )

::String BitmapFont_obj::DEFAULT_GLYPHS;

::openfl::geom::Point BitmapFont_obj::POINT;

::openfl::geom::Matrix BitmapFont_obj::MATRIX;

::openfl::geom::ColorTransform BitmapFont_obj::COLOR_TRANSFORM;

::haxegon::bitmapFont::BitmapFont BitmapFont_obj::fromAngelCode( ::openfl::display::BitmapData Source,::Xml Data){
	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","fromAngelCode",0xf4624856,"haxegon.bitmapFont.BitmapFont.fromAngelCode","haxegon/bitmapFont/BitmapFont.hx",218,0x0e43809e)
	HX_STACK_ARG(Source,"Source")
	HX_STACK_ARG(Data,"Data")
	HX_STACK_LINE(219)
	::Xml tmp = Data->firstElement();		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(219)
	::haxe::xml::Fast tmp1 = ::haxe::xml::Fast_obj::__new(tmp);		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(219)
	::haxe::xml::Fast fast = tmp1;		HX_STACK_VAR(fast,"fast");
	HX_STACK_LINE(220)
	::haxe::xml::Fast tmp2 = fast->node->resolve(HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"));		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(220)
	::String tmp3 = tmp2->att->resolve(HX_HCSTRING("face","\x9d","\xb4","\xb5","\x43"));		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(220)
	::String tmp4 = ::Std_obj::string(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(220)
	::String fontName = tmp4;		HX_STACK_VAR(fontName,"fontName");
	HX_STACK_LINE(222)
	::String tmp5 = fontName;		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(222)
	::haxegon::bitmapFont::BitmapFont tmp6 = ::haxegon::bitmapFont::BitmapFont_obj::get(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(222)
	::haxegon::bitmapFont::BitmapFont font = tmp6;		HX_STACK_VAR(font,"font");
	HX_STACK_LINE(224)
	bool tmp7 = (font != null());		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(224)
	if ((tmp7)){
		HX_STACK_LINE(226)
		::haxegon::bitmapFont::BitmapFont tmp8 = font;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(226)
		return tmp8;
	}
	HX_STACK_LINE(229)
	::haxegon::bitmapFont::BitmapFont tmp8 = ::haxegon::bitmapFont::BitmapFont_obj::__new(fontName,Source);		HX_STACK_VAR(tmp8,"tmp8");
	HX_STACK_LINE(229)
	font = tmp8;
	HX_STACK_LINE(230)
	::haxe::xml::Fast tmp9 = fast->node->resolve(HX_HCSTRING("common","\x2b","\x75","\x2e","\xc7"));		HX_STACK_VAR(tmp9,"tmp9");
	HX_STACK_LINE(230)
	::String tmp10 = tmp9->att->resolve(HX_HCSTRING("lineHeight","\xfb","\x02","\xf4","\xd6"));		HX_STACK_VAR(tmp10,"tmp10");
	HX_STACK_LINE(230)
	Dynamic tmp11 = ::Std_obj::parseInt(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
	HX_STACK_LINE(230)
	font->lineHeight = tmp11;
	HX_STACK_LINE(231)
	::haxe::xml::Fast tmp12 = fast->node->resolve(HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"));		HX_STACK_VAR(tmp12,"tmp12");
	HX_STACK_LINE(231)
	::String tmp13 = tmp12->att->resolve(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));		HX_STACK_VAR(tmp13,"tmp13");
	HX_STACK_LINE(231)
	Dynamic tmp14 = ::Std_obj::parseInt(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
	HX_STACK_LINE(231)
	font->size = tmp14;
	HX_STACK_LINE(232)
	::haxe::xml::Fast tmp15 = fast->node->resolve(HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"));		HX_STACK_VAR(tmp15,"tmp15");
	HX_STACK_LINE(232)
	::String tmp16 = tmp15->att->resolve(HX_HCSTRING("face","\x9d","\xb4","\xb5","\x43"));		HX_STACK_VAR(tmp16,"tmp16");
	HX_STACK_LINE(232)
	::String tmp17 = ::Std_obj::string(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
	HX_STACK_LINE(232)
	font->fontName = tmp17;
	HX_STACK_LINE(233)
	::haxe::xml::Fast tmp18 = fast->node->resolve(HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"));		HX_STACK_VAR(tmp18,"tmp18");
	HX_STACK_LINE(233)
	::String tmp19 = tmp18->att->resolve(HX_HCSTRING("bold","\x85","\x81","\x1b","\x41"));		HX_STACK_VAR(tmp19,"tmp19");
	HX_STACK_LINE(233)
	Dynamic tmp20 = ::Std_obj::parseInt(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
	HX_STACK_LINE(233)
	bool tmp21 = (tmp20 != (int)0);		HX_STACK_VAR(tmp21,"tmp21");
	HX_STACK_LINE(233)
	font->bold = tmp21;
	HX_STACK_LINE(234)
	::haxe::xml::Fast tmp22 = fast->node->resolve(HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"));		HX_STACK_VAR(tmp22,"tmp22");
	HX_STACK_LINE(234)
	::String tmp23 = tmp22->att->resolve(HX_HCSTRING("italic","\xf0","\x2e","\x64","\x06"));		HX_STACK_VAR(tmp23,"tmp23");
	HX_STACK_LINE(234)
	Dynamic tmp24 = ::Std_obj::parseInt(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
	HX_STACK_LINE(234)
	bool tmp25 = (tmp24 != (int)0);		HX_STACK_VAR(tmp25,"tmp25");
	HX_STACK_LINE(234)
	font->italic = tmp25;
	HX_STACK_LINE(236)
	::openfl::geom::Rectangle frame;		HX_STACK_VAR(frame,"frame");
	HX_STACK_LINE(237)
	::String glyph;		HX_STACK_VAR(glyph,"glyph");
	HX_STACK_LINE(238)
	int charCode;		HX_STACK_VAR(charCode,"charCode");
	HX_STACK_LINE(239)
	Dynamic tmp26 = HX_HCSTRING(" ","\x20","\x00","\x00","\x00").charCodeAt((int)0);		HX_STACK_VAR(tmp26,"tmp26");
	HX_STACK_LINE(239)
	int spaceCharCode = tmp26;		HX_STACK_VAR(spaceCharCode,"spaceCharCode");
	HX_STACK_LINE(240)
	int xOffset;		HX_STACK_VAR(xOffset,"xOffset");
	HX_STACK_LINE(240)
	int yOffset;		HX_STACK_VAR(yOffset,"yOffset");
	HX_STACK_LINE(240)
	int xAdvance;		HX_STACK_VAR(xAdvance,"xAdvance");
	HX_STACK_LINE(241)
	int frameHeight;		HX_STACK_VAR(frameHeight,"frameHeight");
	HX_STACK_LINE(243)
	::haxe::xml::Fast tmp27 = fast->node->resolve(HX_HCSTRING("chars","\xdd","\x9c","\xb3","\x45"));		HX_STACK_VAR(tmp27,"tmp27");
	HX_STACK_LINE(243)
	::haxe::xml::Fast chars = tmp27;		HX_STACK_VAR(chars,"chars");
	HX_STACK_LINE(245)
	{
		HX_STACK_LINE(245)
		::_List::ListIterator tmp28;		HX_STACK_VAR(tmp28,"tmp28");
		HX_STACK_LINE(245)
		{
			HX_STACK_LINE(245)
			::List tmp29 = chars->nodes->resolve(HX_HCSTRING("char","\xd6","\x5e","\xbf","\x41"));		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(245)
			::List _this = tmp29;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(245)
			tmp28 = ::_List::ListIterator_obj::__new(_this->h);
		}
		HX_STACK_LINE(245)
		::_List::ListIterator _g = tmp28;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(245)
		while((true)){
			HX_STACK_LINE(245)
			bool tmp29 = (_g->head != null());		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(245)
			bool tmp30 = !(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
			HX_STACK_LINE(245)
			if ((tmp30)){
				HX_STACK_LINE(245)
				break;
			}
			HX_STACK_LINE(245)
			Dynamic tmp31;		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(245)
			{
				HX_STACK_LINE(245)
				Dynamic tmp32 = _g->head->__GetItem((int)0);		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(245)
				_g->val = tmp32;
				HX_STACK_LINE(245)
				Dynamic tmp33 = _g->head->__GetItem((int)1);		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(245)
				_g->head = tmp33;
				HX_STACK_LINE(245)
				tmp31 = _g->val;
			}
			HX_STACK_LINE(245)
			::haxe::xml::Fast _char = ((::haxe::xml::Fast)(tmp31));		HX_STACK_VAR(_char,"char");
			HX_STACK_LINE(247)
			::openfl::geom::Rectangle tmp32 = ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(247)
			frame = tmp32;
			HX_STACK_LINE(248)
			::String tmp33 = _char->att->resolve(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));		HX_STACK_VAR(tmp33,"tmp33");
			HX_STACK_LINE(248)
			Dynamic tmp34 = ::Std_obj::parseInt(tmp33);		HX_STACK_VAR(tmp34,"tmp34");
			HX_STACK_LINE(248)
			frame->x = tmp34;
			HX_STACK_LINE(249)
			::String tmp35 = _char->att->resolve(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));		HX_STACK_VAR(tmp35,"tmp35");
			HX_STACK_LINE(249)
			Dynamic tmp36 = ::Std_obj::parseInt(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
			HX_STACK_LINE(249)
			frame->y = tmp36;
			HX_STACK_LINE(250)
			::String tmp37 = _char->att->resolve(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));		HX_STACK_VAR(tmp37,"tmp37");
			HX_STACK_LINE(250)
			Dynamic tmp38 = ::Std_obj::parseInt(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
			HX_STACK_LINE(250)
			frame->width = tmp38;
			HX_STACK_LINE(251)
			::String tmp39 = _char->att->resolve(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));		HX_STACK_VAR(tmp39,"tmp39");
			HX_STACK_LINE(251)
			Dynamic tmp40 = ::Std_obj::parseInt(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
			HX_STACK_LINE(251)
			frameHeight = tmp40;
			HX_STACK_LINE(252)
			frame->height = frameHeight;
			HX_STACK_LINE(254)
			bool tmp41 = _char->has->resolve(HX_HCSTRING("xoffset","\x0b","\x42","\x4f","\xde"));		HX_STACK_VAR(tmp41,"tmp41");
			HX_STACK_LINE(254)
			int tmp42;		HX_STACK_VAR(tmp42,"tmp42");
			HX_STACK_LINE(254)
			if ((tmp41)){
				HX_STACK_LINE(254)
				::String tmp43 = _char->att->resolve(HX_HCSTRING("xoffset","\x0b","\x42","\x4f","\xde"));		HX_STACK_VAR(tmp43,"tmp43");
				HX_STACK_LINE(254)
				tmp42 = ::Std_obj::parseInt(tmp43);
			}
			else{
				HX_STACK_LINE(254)
				tmp42 = (int)0;
			}
			HX_STACK_LINE(254)
			xOffset = tmp42;
			HX_STACK_LINE(255)
			bool tmp43 = _char->has->resolve(HX_HCSTRING("yoffset","\xcc","\xb8","\xe4","\x07"));		HX_STACK_VAR(tmp43,"tmp43");
			HX_STACK_LINE(255)
			int tmp44;		HX_STACK_VAR(tmp44,"tmp44");
			HX_STACK_LINE(255)
			if ((tmp43)){
				HX_STACK_LINE(255)
				::String tmp45 = _char->att->resolve(HX_HCSTRING("yoffset","\xcc","\xb8","\xe4","\x07"));		HX_STACK_VAR(tmp45,"tmp45");
				HX_STACK_LINE(255)
				tmp44 = ::Std_obj::parseInt(tmp45);
			}
			else{
				HX_STACK_LINE(255)
				tmp44 = (int)0;
			}
			HX_STACK_LINE(255)
			yOffset = tmp44;
			HX_STACK_LINE(256)
			bool tmp45 = _char->has->resolve(HX_HCSTRING("xadvance","\x0a","\x87","\xb1","\xbe"));		HX_STACK_VAR(tmp45,"tmp45");
			HX_STACK_LINE(256)
			int tmp46;		HX_STACK_VAR(tmp46,"tmp46");
			HX_STACK_LINE(256)
			if ((tmp45)){
				HX_STACK_LINE(256)
				::String tmp47 = _char->att->resolve(HX_HCSTRING("xadvance","\x0a","\x87","\xb1","\xbe"));		HX_STACK_VAR(tmp47,"tmp47");
				HX_STACK_LINE(256)
				tmp46 = ::Std_obj::parseInt(tmp47);
			}
			else{
				HX_STACK_LINE(256)
				tmp46 = (int)0;
			}
			HX_STACK_LINE(256)
			xAdvance = tmp46;
			HX_STACK_LINE(258)
			bool tmp47 = (font->minOffsetX > xOffset);		HX_STACK_VAR(tmp47,"tmp47");
			HX_STACK_LINE(258)
			int tmp48;		HX_STACK_VAR(tmp48,"tmp48");
			HX_STACK_LINE(258)
			if ((tmp47)){
				HX_STACK_LINE(258)
				tmp48 = xOffset;
			}
			else{
				HX_STACK_LINE(258)
				tmp48 = font->minOffsetX;
			}
			HX_STACK_LINE(258)
			font->minOffsetX = tmp48;
			HX_STACK_LINE(260)
			glyph = null();
			HX_STACK_LINE(261)
			charCode = (int)-1;
			HX_STACK_LINE(263)
			bool tmp49 = _char->has->resolve(HX_HCSTRING("letter","\xe6","\xac","\x08","\xa3"));		HX_STACK_VAR(tmp49,"tmp49");
			HX_STACK_LINE(263)
			if ((tmp49)){
				HX_STACK_LINE(265)
				::String tmp50 = _char->att->resolve(HX_HCSTRING("letter","\xe6","\xac","\x08","\xa3"));		HX_STACK_VAR(tmp50,"tmp50");
				HX_STACK_LINE(265)
				glyph = tmp50;
			}
			else{
				HX_STACK_LINE(267)
				bool tmp50 = _char->has->resolve(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));		HX_STACK_VAR(tmp50,"tmp50");
				HX_STACK_LINE(267)
				if ((tmp50)){
					HX_STACK_LINE(269)
					::String tmp51 = _char->att->resolve(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));		HX_STACK_VAR(tmp51,"tmp51");
					HX_STACK_LINE(269)
					Dynamic tmp52 = ::Std_obj::parseInt(tmp51);		HX_STACK_VAR(tmp52,"tmp52");
					HX_STACK_LINE(269)
					charCode = tmp52;
				}
			}
			HX_STACK_LINE(272)
			int tmp50 = charCode;		HX_STACK_VAR(tmp50,"tmp50");
			HX_STACK_LINE(272)
			int tmp51 = (int)-1;		HX_STACK_VAR(tmp51,"tmp51");
			HX_STACK_LINE(272)
			bool tmp52 = (tmp50 == tmp51);		HX_STACK_VAR(tmp52,"tmp52");
			HX_STACK_LINE(272)
			bool tmp53;		HX_STACK_VAR(tmp53,"tmp53");
			HX_STACK_LINE(272)
			if ((tmp52)){
				HX_STACK_LINE(272)
				tmp53 = (glyph == null());
			}
			else{
				HX_STACK_LINE(272)
				tmp53 = false;
			}
			HX_STACK_LINE(272)
			if ((tmp53)){
				HX_STACK_LINE(274)
				HX_STACK_DO_THROW(HX_HCSTRING("Invalid font xml data!","\x46","\x95","\x43","\xb9"));
			}
			HX_STACK_LINE(277)
			bool tmp54 = (glyph != null());		HX_STACK_VAR(tmp54,"tmp54");
			HX_STACK_LINE(277)
			if ((tmp54)){
				HX_STACK_LINE(279)
				::String tmp55 = glyph;		HX_STACK_VAR(tmp55,"tmp55");
				HX_STACK_LINE(279)
				::String tmp56;		HX_STACK_VAR(tmp56,"tmp56");
				HX_STACK_LINE(279)
				::String _switch_1 = (tmp55);
				if (  ( _switch_1==HX_HCSTRING("space","\xc6","\x8c","\x66","\x81"))){
					HX_STACK_LINE(281)
					tmp56 = HX_HCSTRING(" ","\x20","\x00","\x00","\x00");
				}
				else if (  ( _switch_1==HX_HCSTRING("&quot;","\x2c","\xd9","\x81","\x8f"))){
					HX_STACK_LINE(282)
					tmp56 = HX_HCSTRING("\"","\x22","\x00","\x00","\x00");
				}
				else if (  ( _switch_1==HX_HCSTRING("&amp;","\xdd","\xd4","\xaa","\x21"))){
					HX_STACK_LINE(283)
					tmp56 = HX_HCSTRING("&","\x26","\x00","\x00","\x00");
				}
				else if (  ( _switch_1==HX_HCSTRING("&gt;","\x08","\xa9","\x6c","\x19"))){
					HX_STACK_LINE(284)
					tmp56 = HX_HCSTRING(">","\x3e","\x00","\x00","\x00");
				}
				else if (  ( _switch_1==HX_HCSTRING("&lt;","\x4d","\x74","\x70","\x19"))){
					HX_STACK_LINE(285)
					tmp56 = HX_HCSTRING("<","\x3c","\x00","\x00","\x00");
				}
				else  {
					HX_STACK_LINE(286)
					tmp56 = glyph;
				}
;
;
				HX_STACK_LINE(279)
				glyph = tmp56;
				HX_STACK_LINE(289)
				::String tmp57 = glyph;		HX_STACK_VAR(tmp57,"tmp57");
				HX_STACK_LINE(289)
				int tmp58 = ::haxe::Utf8_obj::charCodeAt(tmp57,(int)0);		HX_STACK_VAR(tmp58,"tmp58");
				HX_STACK_LINE(289)
				charCode = tmp58;
			}
			HX_STACK_LINE(292)
			int tmp55 = charCode;		HX_STACK_VAR(tmp55,"tmp55");
			HX_STACK_LINE(292)
			::openfl::geom::Rectangle tmp56 = frame;		HX_STACK_VAR(tmp56,"tmp56");
			HX_STACK_LINE(292)
			int tmp57 = xOffset;		HX_STACK_VAR(tmp57,"tmp57");
			HX_STACK_LINE(292)
			int tmp58 = yOffset;		HX_STACK_VAR(tmp58,"tmp58");
			HX_STACK_LINE(292)
			int tmp59 = xAdvance;		HX_STACK_VAR(tmp59,"tmp59");
			HX_STACK_LINE(292)
			font->addGlyphFrame(tmp55,tmp56,tmp57,tmp58,tmp59);
			HX_STACK_LINE(294)
			bool tmp60 = (charCode == spaceCharCode);		HX_STACK_VAR(tmp60,"tmp60");
			HX_STACK_LINE(294)
			if ((tmp60)){
				HX_STACK_LINE(296)
				font->spaceWidth = xAdvance;
			}
			else{
				HX_STACK_LINE(300)
				int tmp61 = font->lineHeight;		HX_STACK_VAR(tmp61,"tmp61");
				HX_STACK_LINE(300)
				int tmp62 = (frameHeight + yOffset);		HX_STACK_VAR(tmp62,"tmp62");
				HX_STACK_LINE(300)
				bool tmp63 = (tmp61 > tmp62);		HX_STACK_VAR(tmp63,"tmp63");
				HX_STACK_LINE(300)
				int tmp64;		HX_STACK_VAR(tmp64,"tmp64");
				HX_STACK_LINE(300)
				if ((tmp63)){
					HX_STACK_LINE(300)
					tmp64 = font->lineHeight;
				}
				else{
					HX_STACK_LINE(300)
					tmp64 = (frameHeight + yOffset);
				}
				HX_STACK_LINE(300)
				font->lineHeight = tmp64;
			}
		}
	}
	HX_STACK_LINE(304)
	::haxegon::bitmapFont::BitmapFont tmp28 = font;		HX_STACK_VAR(tmp28,"tmp28");
	HX_STACK_LINE(304)
	return tmp28;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapFont_obj,fromAngelCode,return )

::haxegon::bitmapFont::BitmapFont BitmapFont_obj::fromXNA( ::String key,::openfl::display::BitmapData source,::String letters,hx::Null< int >  __o_glyphBGColor){
int glyphBGColor = __o_glyphBGColor.Default(0);
	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","fromXNA",0x5a9ec573,"haxegon.bitmapFont.BitmapFont.fromXNA","haxegon/bitmapFont/BitmapFont.hx",318,0x0e43809e)
	HX_STACK_ARG(key,"key")
	HX_STACK_ARG(source,"source")
	HX_STACK_ARG(letters,"letters")
	HX_STACK_ARG(glyphBGColor,"glyphBGColor")
{
		HX_STACK_LINE(319)
		::String tmp = key;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(319)
		::haxegon::bitmapFont::BitmapFont tmp1 = ::haxegon::bitmapFont::BitmapFont_obj::get(tmp);		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(319)
		::haxegon::bitmapFont::BitmapFont font = tmp1;		HX_STACK_VAR(font,"font");
		HX_STACK_LINE(321)
		bool tmp2 = (font != null());		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(321)
		if ((tmp2)){
			HX_STACK_LINE(323)
			::haxegon::bitmapFont::BitmapFont tmp3 = font;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(323)
			return tmp3;
		}
		HX_STACK_LINE(326)
		::haxegon::bitmapFont::BitmapFont tmp3 = ::haxegon::bitmapFont::BitmapFont_obj::__new(key,source);		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(326)
		font = tmp3;
		HX_STACK_LINE(327)
		font->fontName = key;
		HX_STACK_LINE(329)
		bool tmp4 = (letters == null());		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(329)
		::String tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(329)
		if ((tmp4)){
			HX_STACK_LINE(329)
			tmp5 = HX_HCSTRING(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~","\x6f","\x61","\x48","\x0a");
		}
		else{
			HX_STACK_LINE(329)
			tmp5 = letters;
		}
		HX_STACK_LINE(329)
		letters = tmp5;
		HX_STACK_LINE(331)
		::openfl::display::BitmapData bmd = source;		HX_STACK_VAR(bmd,"bmd");
		HX_STACK_LINE(332)
		int tmp6 = bmd->getPixel((int)0,(int)0);		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(332)
		int globalBGColor = tmp6;		HX_STACK_VAR(globalBGColor,"globalBGColor");
		HX_STACK_LINE(333)
		int cy = (int)0;		HX_STACK_VAR(cy,"cy");
		HX_STACK_LINE(334)
		int cx;		HX_STACK_VAR(cx,"cx");
		HX_STACK_LINE(335)
		int letterIdx = (int)0;		HX_STACK_VAR(letterIdx,"letterIdx");
		HX_STACK_LINE(336)
		int charCode;		HX_STACK_VAR(charCode,"charCode");
		HX_STACK_LINE(337)
		::String tmp7 = letters;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(337)
		int tmp8 = ::haxe::Utf8_obj::length(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(337)
		int numLetters = tmp8;		HX_STACK_VAR(numLetters,"numLetters");
		HX_STACK_LINE(338)
		::openfl::geom::Rectangle rect;		HX_STACK_VAR(rect,"rect");
		HX_STACK_LINE(339)
		int xAdvance;		HX_STACK_VAR(xAdvance,"xAdvance");
		HX_STACK_LINE(341)
		while((true)){
			HX_STACK_LINE(341)
			bool tmp9 = (cy < bmd->height);		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(341)
			bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(341)
			if ((tmp9)){
				HX_STACK_LINE(341)
				tmp10 = (letterIdx < numLetters);
			}
			else{
				HX_STACK_LINE(341)
				tmp10 = false;
			}
			HX_STACK_LINE(341)
			bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(341)
			if ((tmp11)){
				HX_STACK_LINE(341)
				break;
			}
			HX_STACK_LINE(343)
			int rowHeight = (int)0;		HX_STACK_VAR(rowHeight,"rowHeight");
			HX_STACK_LINE(344)
			cx = (int)0;
			HX_STACK_LINE(346)
			while((true)){
				HX_STACK_LINE(346)
				bool tmp12 = (cx < bmd->width);		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(346)
				bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(346)
				if ((tmp12)){
					HX_STACK_LINE(346)
					tmp13 = (letterIdx < numLetters);
				}
				else{
					HX_STACK_LINE(346)
					tmp13 = false;
				}
				HX_STACK_LINE(346)
				bool tmp14 = !(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(346)
				if ((tmp14)){
					HX_STACK_LINE(346)
					break;
				}
				HX_STACK_LINE(348)
				int tmp15 = cx;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(348)
				int tmp16 = cy;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(348)
				int tmp17 = bmd->getPixel(tmp15,tmp16);		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(348)
				int tmp18 = ::Std_obj::_int(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(348)
				int tmp19 = globalBGColor;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(348)
				bool tmp20 = (tmp18 != tmp19);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(348)
				if ((tmp20)){
					HX_STACK_LINE(351)
					int gx = cx;		HX_STACK_VAR(gx,"gx");
					HX_STACK_LINE(352)
					int gy = cy;		HX_STACK_VAR(gy,"gy");
					HX_STACK_LINE(355)
					while((true)){
						HX_STACK_LINE(355)
						int tmp21 = gx;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(355)
						int tmp22 = cy;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(355)
						int tmp23 = bmd->getPixel(tmp21,tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(355)
						int tmp24 = ::Std_obj::_int(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(355)
						int tmp25 = globalBGColor;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(355)
						bool tmp26 = (tmp24 != tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(355)
						bool tmp27 = !(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(355)
						if ((tmp27)){
							HX_STACK_LINE(355)
							break;
						}
						HX_STACK_LINE(355)
						(gx)++;
					}
					HX_STACK_LINE(356)
					while((true)){
						HX_STACK_LINE(356)
						int tmp21 = cx;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(356)
						int tmp22 = gy;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(356)
						int tmp23 = bmd->getPixel(tmp21,tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(356)
						int tmp24 = ::Std_obj::_int(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(356)
						int tmp25 = globalBGColor;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(356)
						bool tmp26 = (tmp24 != tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(356)
						bool tmp27 = !(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(356)
						if ((tmp27)){
							HX_STACK_LINE(356)
							break;
						}
						HX_STACK_LINE(356)
						(gy)++;
					}
					HX_STACK_LINE(358)
					int tmp21 = (gx - cx);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(358)
					int gw = tmp21;		HX_STACK_VAR(gw,"gw");
					HX_STACK_LINE(359)
					int tmp22 = (gy - cy);		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(359)
					int gh = tmp22;		HX_STACK_VAR(gh,"gh");
					HX_STACK_LINE(361)
					::String tmp23 = letters;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(361)
					int tmp24 = letterIdx;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(361)
					int tmp25 = ::haxe::Utf8_obj::charCodeAt(tmp23,tmp24);		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(361)
					charCode = tmp25;
					HX_STACK_LINE(363)
					::openfl::geom::Rectangle tmp26 = ::openfl::geom::Rectangle_obj::__new(cx,cy,gw,gh);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(363)
					rect = tmp26;
					HX_STACK_LINE(365)
					xAdvance = gw;
					HX_STACK_LINE(367)
					int tmp27 = charCode;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(367)
					::openfl::geom::Rectangle tmp28 = rect;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(367)
					int tmp29 = xAdvance;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(367)
					font->addGlyphFrame(tmp27,tmp28,(int)0,(int)0,tmp29);
					HX_STACK_LINE(369)
					bool tmp30 = (charCode == (int)32);		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(369)
					if ((tmp30)){
						HX_STACK_LINE(371)
						font->spaceWidth = xAdvance;
					}
					HX_STACK_LINE(375)
					bool tmp31 = (gh > rowHeight);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(375)
					if ((tmp31)){
						HX_STACK_LINE(375)
						rowHeight = gh;
					}
					HX_STACK_LINE(376)
					bool tmp32 = (gh > font->size);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(376)
					if ((tmp32)){
						HX_STACK_LINE(376)
						font->size = gh;
					}
					HX_STACK_LINE(379)
					hx::AddEq(cx,gw);
					HX_STACK_LINE(380)
					(letterIdx)++;
				}
				HX_STACK_LINE(383)
				(cx)++;
			}
			HX_STACK_LINE(387)
			int tmp12 = (rowHeight + (int)1);		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(387)
			hx::AddEq(cy,tmp12);
		}
		HX_STACK_LINE(390)
		font->lineHeight = font->size;
		HX_STACK_LINE(393)
		::openfl::geom::Point tmp9 = ::haxegon::bitmapFont::BitmapFont_obj::POINT;		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(393)
		Float tmp10 = tmp9->y = (int)0;		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(393)
		::openfl::geom::Point tmp11 = ::haxegon::bitmapFont::BitmapFont_obj::POINT;		HX_STACK_VAR(tmp11,"tmp11");
		HX_STACK_LINE(393)
		tmp11->x = tmp10;
		HX_STACK_LINE(394)
		int tmp12 = bmd->getPixel32((int)0,(int)0);		HX_STACK_VAR(tmp12,"tmp12");
		HX_STACK_LINE(394)
		int bgColor32 = tmp12;		HX_STACK_VAR(bgColor32,"bgColor32");
		HX_STACK_LINE(396)
		::openfl::display::BitmapData tmp13 = bmd;		HX_STACK_VAR(tmp13,"tmp13");
		HX_STACK_LINE(396)
		::openfl::geom::Rectangle tmp14 = bmd->rect;		HX_STACK_VAR(tmp14,"tmp14");
		HX_STACK_LINE(396)
		::openfl::geom::Point tmp15 = ::haxegon::bitmapFont::BitmapFont_obj::POINT;		HX_STACK_VAR(tmp15,"tmp15");
		HX_STACK_LINE(396)
		int tmp16 = bgColor32;		HX_STACK_VAR(tmp16,"tmp16");
		HX_STACK_LINE(396)
		bmd->threshold(tmp13,tmp14,tmp15,HX_HCSTRING("==","\x60","\x35","\x00","\x00"),tmp16,(int)0,(int)-1,true);
		HX_STACK_LINE(400)
		bool tmp17 = (glyphBGColor != (int)0);		HX_STACK_VAR(tmp17,"tmp17");
		HX_STACK_LINE(400)
		if ((tmp17)){
			HX_STACK_LINE(403)
			::openfl::display::BitmapData tmp18 = bmd;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(403)
			::openfl::geom::Rectangle tmp19 = bmd->rect;		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(403)
			::openfl::geom::Point tmp20 = ::haxegon::bitmapFont::BitmapFont_obj::POINT;		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(403)
			int tmp21 = glyphBGColor;		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(403)
			bmd->threshold(tmp18,tmp19,tmp20,HX_HCSTRING("==","\x60","\x35","\x00","\x00"),tmp21,(int)0,(int)-1,true);
		}
		HX_STACK_LINE(409)
		::haxegon::bitmapFont::BitmapFont tmp18 = font;		HX_STACK_VAR(tmp18,"tmp18");
		HX_STACK_LINE(409)
		return tmp18;
	}
}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(BitmapFont_obj,fromXNA,return )

::openfl::display::BitmapData BitmapFont_obj::replaceColor( ::openfl::display::BitmapData bitmapData,int color,int newColor){
	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","replaceColor",0xd733f93d,"haxegon.bitmapFont.BitmapFont.replaceColor","haxegon/bitmapFont/BitmapFont.hx",413,0x0e43809e)
	HX_STACK_ARG(bitmapData,"bitmapData")
	HX_STACK_ARG(color,"color")
	HX_STACK_ARG(newColor,"newColor")
	HX_STACK_LINE(414)
	int row = (int)0;		HX_STACK_VAR(row,"row");
	HX_STACK_LINE(415)
	int column = (int)0;		HX_STACK_VAR(column,"column");
	HX_STACK_LINE(416)
	int rows = bitmapData->height;		HX_STACK_VAR(rows,"rows");
	HX_STACK_LINE(417)
	int columns = bitmapData->width;		HX_STACK_VAR(columns,"columns");
	HX_STACK_LINE(418)
	bitmapData->lock();
	HX_STACK_LINE(419)
	while((true)){
		HX_STACK_LINE(419)
		bool tmp = (row < rows);		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(419)
		bool tmp1 = !(tmp);		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(419)
		if ((tmp1)){
			HX_STACK_LINE(419)
			break;
		}
		HX_STACK_LINE(421)
		column = (int)0;
		HX_STACK_LINE(422)
		while((true)){
			HX_STACK_LINE(422)
			bool tmp2 = (column < columns);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(422)
			bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(422)
			if ((tmp3)){
				HX_STACK_LINE(422)
				break;
			}
			HX_STACK_LINE(424)
			int tmp4 = column;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(424)
			int tmp5 = row;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(424)
			int tmp6 = bitmapData->getPixel32(tmp4,tmp5);		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(424)
			int tmp7 = color;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(424)
			bool tmp8 = (tmp6 == tmp7);		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(424)
			if ((tmp8)){
				HX_STACK_LINE(426)
				int tmp9 = column;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(426)
				int tmp10 = row;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(426)
				int tmp11 = newColor;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(426)
				bitmapData->setPixel32(tmp9,tmp10,tmp11);
			}
			HX_STACK_LINE(428)
			(column)++;
		}
		HX_STACK_LINE(430)
		(row)++;
	}
	HX_STACK_LINE(432)
	bitmapData->unlock(null());
	HX_STACK_LINE(434)
	::openfl::display::BitmapData tmp = bitmapData;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(434)
	return tmp;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapFont_obj,replaceColor,return )

::haxegon::bitmapFont::BitmapFont BitmapFont_obj::fromMonospace( ::String key,::openfl::display::BitmapData source,::String letters,::openfl::geom::Point charSize,::openfl::geom::Rectangle region,::openfl::geom::Point spacing){
	HX_STACK_FRAME("haxegon.bitmapFont.BitmapFont","fromMonospace",0x590f8a8b,"haxegon.bitmapFont.BitmapFont.fromMonospace","haxegon/bitmapFont/BitmapFont.hx",449,0x0e43809e)
	HX_STACK_ARG(key,"key")
	HX_STACK_ARG(source,"source")
	HX_STACK_ARG(letters,"letters")
	HX_STACK_ARG(charSize,"charSize")
	HX_STACK_ARG(region,"region")
	HX_STACK_ARG(spacing,"spacing")
	HX_STACK_LINE(450)
	::String tmp = key;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(450)
	::haxegon::bitmapFont::BitmapFont tmp1 = ::haxegon::bitmapFont::BitmapFont_obj::get(tmp);		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(450)
	::haxegon::bitmapFont::BitmapFont font = tmp1;		HX_STACK_VAR(font,"font");
	HX_STACK_LINE(451)
	bool tmp2 = (font != null());		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(451)
	if ((tmp2)){
		HX_STACK_LINE(452)
		::haxegon::bitmapFont::BitmapFont tmp3 = font;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(452)
		return tmp3;
	}
	HX_STACK_LINE(454)
	bool tmp3 = (letters == null());		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(454)
	::String tmp4;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(454)
	if ((tmp3)){
		HX_STACK_LINE(454)
		tmp4 = HX_HCSTRING(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~","\x6f","\x61","\x48","\x0a");
	}
	else{
		HX_STACK_LINE(454)
		tmp4 = letters;
	}
	HX_STACK_LINE(454)
	letters = tmp4;
	HX_STACK_LINE(456)
	bool tmp5 = (region == null());		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(456)
	::openfl::geom::Rectangle tmp6;		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(456)
	if ((tmp5)){
		HX_STACK_LINE(456)
		tmp6 = source->rect;
	}
	else{
		HX_STACK_LINE(456)
		tmp6 = region;
	}
	HX_STACK_LINE(456)
	region = tmp6;
	HX_STACK_LINE(458)
	bool tmp7 = (region->width == (int)0);		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(458)
	bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
	HX_STACK_LINE(458)
	bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
	HX_STACK_LINE(458)
	if ((tmp8)){
		HX_STACK_LINE(458)
		Float tmp10 = region->get_right();		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(458)
		Float tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
		HX_STACK_LINE(458)
		int tmp12 = source->width;		HX_STACK_VAR(tmp12,"tmp12");
		HX_STACK_LINE(458)
		tmp9 = (tmp11 > tmp12);
	}
	else{
		HX_STACK_LINE(458)
		tmp9 = true;
	}
	HX_STACK_LINE(458)
	if ((tmp9)){
		HX_STACK_LINE(460)
		Float tmp10 = (source->width - region->x);		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(460)
		region->width = tmp10;
	}
	HX_STACK_LINE(463)
	bool tmp10 = (region->height == (int)0);		HX_STACK_VAR(tmp10,"tmp10");
	HX_STACK_LINE(463)
	bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
	HX_STACK_LINE(463)
	bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
	HX_STACK_LINE(463)
	if ((tmp11)){
		HX_STACK_LINE(463)
		Float tmp13 = region->get_bottom();		HX_STACK_VAR(tmp13,"tmp13");
		HX_STACK_LINE(463)
		Float tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
		HX_STACK_LINE(463)
		int tmp15 = source->height;		HX_STACK_VAR(tmp15,"tmp15");
		HX_STACK_LINE(463)
		tmp12 = (tmp14 > tmp15);
	}
	else{
		HX_STACK_LINE(463)
		tmp12 = true;
	}
	HX_STACK_LINE(463)
	if ((tmp12)){
		HX_STACK_LINE(465)
		Float tmp13 = (source->height - region->y);		HX_STACK_VAR(tmp13,"tmp13");
		HX_STACK_LINE(465)
		region->height = tmp13;
	}
	HX_STACK_LINE(468)
	bool tmp13 = (spacing == null());		HX_STACK_VAR(tmp13,"tmp13");
	HX_STACK_LINE(468)
	::openfl::geom::Point tmp14;		HX_STACK_VAR(tmp14,"tmp14");
	HX_STACK_LINE(468)
	if ((tmp13)){
		HX_STACK_LINE(468)
		tmp14 = ::openfl::geom::Point_obj::__new((int)0,(int)0);
	}
	else{
		HX_STACK_LINE(468)
		tmp14 = spacing;
	}
	HX_STACK_LINE(468)
	spacing = tmp14;
	HX_STACK_LINE(470)
	Float tmp15 = region->width;		HX_STACK_VAR(tmp15,"tmp15");
	HX_STACK_LINE(470)
	int tmp16 = ::Std_obj::_int(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
	HX_STACK_LINE(470)
	int bitmapWidth = tmp16;		HX_STACK_VAR(bitmapWidth,"bitmapWidth");
	HX_STACK_LINE(471)
	Float tmp17 = region->height;		HX_STACK_VAR(tmp17,"tmp17");
	HX_STACK_LINE(471)
	int tmp18 = ::Std_obj::_int(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
	HX_STACK_LINE(471)
	int bitmapHeight = tmp18;		HX_STACK_VAR(bitmapHeight,"bitmapHeight");
	HX_STACK_LINE(473)
	Float tmp19 = region->x;		HX_STACK_VAR(tmp19,"tmp19");
	HX_STACK_LINE(473)
	int tmp20 = ::Std_obj::_int(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
	HX_STACK_LINE(473)
	int startX = tmp20;		HX_STACK_VAR(startX,"startX");
	HX_STACK_LINE(474)
	Float tmp21 = region->y;		HX_STACK_VAR(tmp21,"tmp21");
	HX_STACK_LINE(474)
	int tmp22 = ::Std_obj::_int(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
	HX_STACK_LINE(474)
	int startY = tmp22;		HX_STACK_VAR(startY,"startY");
	HX_STACK_LINE(476)
	Float tmp23 = spacing->x;		HX_STACK_VAR(tmp23,"tmp23");
	HX_STACK_LINE(476)
	int tmp24 = ::Std_obj::_int(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
	HX_STACK_LINE(476)
	int xSpacing = tmp24;		HX_STACK_VAR(xSpacing,"xSpacing");
	HX_STACK_LINE(477)
	Float tmp25 = spacing->y;		HX_STACK_VAR(tmp25,"tmp25");
	HX_STACK_LINE(477)
	int tmp26 = ::Std_obj::_int(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
	HX_STACK_LINE(477)
	int ySpacing = tmp26;		HX_STACK_VAR(ySpacing,"ySpacing");
	HX_STACK_LINE(479)
	Float tmp27 = charSize->x;		HX_STACK_VAR(tmp27,"tmp27");
	HX_STACK_LINE(479)
	int tmp28 = ::Std_obj::_int(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
	HX_STACK_LINE(479)
	int charWidth = tmp28;		HX_STACK_VAR(charWidth,"charWidth");
	HX_STACK_LINE(480)
	Float tmp29 = charSize->y;		HX_STACK_VAR(tmp29,"tmp29");
	HX_STACK_LINE(480)
	int tmp30 = ::Std_obj::_int(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
	HX_STACK_LINE(480)
	int charHeight = tmp30;		HX_STACK_VAR(charHeight,"charHeight");
	HX_STACK_LINE(482)
	int tmp31 = (charWidth + xSpacing);		HX_STACK_VAR(tmp31,"tmp31");
	HX_STACK_LINE(482)
	int spacedWidth = tmp31;		HX_STACK_VAR(spacedWidth,"spacedWidth");
	HX_STACK_LINE(483)
	int tmp32 = (charHeight + ySpacing);		HX_STACK_VAR(tmp32,"tmp32");
	HX_STACK_LINE(483)
	int spacedHeight = tmp32;		HX_STACK_VAR(spacedHeight,"spacedHeight");
	HX_STACK_LINE(485)
	bool tmp33 = (charHeight == (int)0);		HX_STACK_VAR(tmp33,"tmp33");
	HX_STACK_LINE(485)
	int tmp34;		HX_STACK_VAR(tmp34,"tmp34");
	HX_STACK_LINE(485)
	if ((tmp33)){
		HX_STACK_LINE(485)
		tmp34 = (int)1;
	}
	else{
		HX_STACK_LINE(485)
		int tmp35 = (bitmapHeight + ySpacing);		HX_STACK_VAR(tmp35,"tmp35");
		HX_STACK_LINE(485)
		int tmp36 = spacedHeight;		HX_STACK_VAR(tmp36,"tmp36");
		HX_STACK_LINE(485)
		Float tmp37 = (Float(tmp35) / Float(tmp36));		HX_STACK_VAR(tmp37,"tmp37");
		HX_STACK_LINE(485)
		tmp34 = ::Std_obj::_int(tmp37);
	}
	HX_STACK_LINE(485)
	int numRows = tmp34;		HX_STACK_VAR(numRows,"numRows");
	HX_STACK_LINE(486)
	bool tmp35 = (charWidth == (int)0);		HX_STACK_VAR(tmp35,"tmp35");
	HX_STACK_LINE(486)
	int tmp36;		HX_STACK_VAR(tmp36,"tmp36");
	HX_STACK_LINE(486)
	if ((tmp35)){
		HX_STACK_LINE(486)
		tmp36 = (int)1;
	}
	else{
		HX_STACK_LINE(486)
		int tmp37 = (bitmapWidth + xSpacing);		HX_STACK_VAR(tmp37,"tmp37");
		HX_STACK_LINE(486)
		int tmp38 = spacedWidth;		HX_STACK_VAR(tmp38,"tmp38");
		HX_STACK_LINE(486)
		Float tmp39 = (Float(tmp37) / Float(tmp38));		HX_STACK_VAR(tmp39,"tmp39");
		HX_STACK_LINE(486)
		tmp36 = ::Std_obj::_int(tmp39);
	}
	HX_STACK_LINE(486)
	int numCols = tmp36;		HX_STACK_VAR(numCols,"numCols");
	HX_STACK_LINE(488)
	::haxegon::bitmapFont::BitmapFont tmp37 = ::haxegon::bitmapFont::BitmapFont_obj::__new(key,source);		HX_STACK_VAR(tmp37,"tmp37");
	HX_STACK_LINE(488)
	font = tmp37;
	HX_STACK_LINE(489)
	font->fontName = key;
	HX_STACK_LINE(490)
	int tmp38 = font->size = charHeight;		HX_STACK_VAR(tmp38,"tmp38");
	HX_STACK_LINE(490)
	font->lineHeight = tmp38;
	HX_STACK_LINE(492)
	::openfl::geom::Rectangle charRect;		HX_STACK_VAR(charRect,"charRect");
	HX_STACK_LINE(493)
	int xAdvance = charWidth;		HX_STACK_VAR(xAdvance,"xAdvance");
	HX_STACK_LINE(494)
	font->spaceWidth = xAdvance;
	HX_STACK_LINE(495)
	int letterIndex = (int)0;		HX_STACK_VAR(letterIndex,"letterIndex");
	HX_STACK_LINE(496)
	int numLetters = letters.length;		HX_STACK_VAR(numLetters,"numLetters");
	HX_STACK_LINE(498)
	{
		HX_STACK_LINE(498)
		int _g1 = (int)0;		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(498)
		int _g = numRows;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(498)
		while((true)){
			HX_STACK_LINE(498)
			bool tmp39 = (_g1 < _g);		HX_STACK_VAR(tmp39,"tmp39");
			HX_STACK_LINE(498)
			bool tmp40 = !(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
			HX_STACK_LINE(498)
			if ((tmp40)){
				HX_STACK_LINE(498)
				break;
			}
			HX_STACK_LINE(498)
			int tmp41 = (_g1)++;		HX_STACK_VAR(tmp41,"tmp41");
			HX_STACK_LINE(498)
			int j = tmp41;		HX_STACK_VAR(j,"j");
			HX_STACK_LINE(500)
			{
				HX_STACK_LINE(500)
				int _g3 = (int)0;		HX_STACK_VAR(_g3,"_g3");
				HX_STACK_LINE(500)
				int _g2 = numCols;		HX_STACK_VAR(_g2,"_g2");
				HX_STACK_LINE(500)
				while((true)){
					HX_STACK_LINE(500)
					bool tmp42 = (_g3 < _g2);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(500)
					bool tmp43 = !(tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(500)
					if ((tmp43)){
						HX_STACK_LINE(500)
						break;
					}
					HX_STACK_LINE(500)
					int tmp44 = (_g3)++;		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(500)
					int i = tmp44;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(502)
					int tmp45 = startX;		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(502)
					int tmp46 = (i * spacedWidth);		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(502)
					int tmp47 = (tmp45 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(502)
					int tmp48 = startY;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(502)
					int tmp49 = (j * spacedHeight);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(502)
					int tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(502)
					int tmp51 = charWidth;		HX_STACK_VAR(tmp51,"tmp51");
					HX_STACK_LINE(502)
					int tmp52 = charHeight;		HX_STACK_VAR(tmp52,"tmp52");
					HX_STACK_LINE(502)
					::openfl::geom::Rectangle tmp53 = ::openfl::geom::Rectangle_obj::__new(tmp47,tmp50,tmp51,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
					HX_STACK_LINE(502)
					charRect = tmp53;
					HX_STACK_LINE(503)
					::String tmp54 = letters;		HX_STACK_VAR(tmp54,"tmp54");
					HX_STACK_LINE(503)
					int tmp55 = letterIndex;		HX_STACK_VAR(tmp55,"tmp55");
					HX_STACK_LINE(503)
					int tmp56 = ::haxe::Utf8_obj::charCodeAt(tmp54,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
					HX_STACK_LINE(503)
					::openfl::geom::Rectangle tmp57 = charRect;		HX_STACK_VAR(tmp57,"tmp57");
					HX_STACK_LINE(503)
					int tmp58 = xAdvance;		HX_STACK_VAR(tmp58,"tmp58");
					HX_STACK_LINE(503)
					font->addGlyphFrame(tmp56,tmp57,(int)0,(int)0,tmp58);
					HX_STACK_LINE(505)
					(letterIndex)++;
					HX_STACK_LINE(507)
					bool tmp59 = (letterIndex >= numLetters);		HX_STACK_VAR(tmp59,"tmp59");
					HX_STACK_LINE(507)
					if ((tmp59)){
						HX_STACK_LINE(509)
						::haxegon::bitmapFont::BitmapFont tmp60 = font;		HX_STACK_VAR(tmp60,"tmp60");
						HX_STACK_LINE(509)
						return tmp60;
					}
				}
			}
		}
	}
	HX_STACK_LINE(514)
	::haxegon::bitmapFont::BitmapFont tmp39 = font;		HX_STACK_VAR(tmp39,"tmp39");
	HX_STACK_LINE(514)
	return tmp39;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(BitmapFont_obj,fromMonospace,return )


BitmapFont_obj::BitmapFont_obj()
{
}

void BitmapFont_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapFont);
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(lineHeight,"lineHeight");
	HX_MARK_MEMBER_NAME(bold,"bold");
	HX_MARK_MEMBER_NAME(italic,"italic");
	HX_MARK_MEMBER_NAME(fontName,"fontName");
	HX_MARK_MEMBER_NAME(minOffsetX,"minOffsetX");
	HX_MARK_MEMBER_NAME(spaceWidth,"spaceWidth");
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(glyphs,"glyphs");
	HX_MARK_END_CLASS();
}

void BitmapFont_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(lineHeight,"lineHeight");
	HX_VISIT_MEMBER_NAME(bold,"bold");
	HX_VISIT_MEMBER_NAME(italic,"italic");
	HX_VISIT_MEMBER_NAME(fontName,"fontName");
	HX_VISIT_MEMBER_NAME(minOffsetX,"minOffsetX");
	HX_VISIT_MEMBER_NAME(spaceWidth,"spaceWidth");
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(glyphs,"glyphs");
}

Dynamic BitmapFont_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return size; }
		if (HX_FIELD_EQ(inName,"bold") ) { return bold; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"italic") ) { return italic; }
		if (HX_FIELD_EQ(inName,"bitmap") ) { return bitmap; }
		if (HX_FIELD_EQ(inName,"glyphs") ) { return glyphs; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return dispose_dyn(); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fontName") ) { return fontName; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lineHeight") ) { return lineHeight; }
		if (HX_FIELD_EQ(inName,"minOffsetX") ) { return minOffsetX; }
		if (HX_FIELD_EQ(inName,"spaceWidth") ) { return spaceWidth; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"addGlyphFrame") ) { return addGlyphFrame_dyn(); }
		if (HX_FIELD_EQ(inName,"prepareGlyphs") ) { return prepareGlyphs_dyn(); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapFont_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true;  }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fonts") ) { outValue = fonts; return true;  }
		if (HX_FIELD_EQ(inName,"store") ) { outValue = store_dyn(); return true;  }
		if (HX_FIELD_EQ(inName,"POINT") ) { outValue = POINT; return true;  }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true;  }
		if (HX_FIELD_EQ(inName,"MATRIX") ) { outValue = MATRIX; return true;  }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromXNA") ) { outValue = fromXNA_dyn(); return true;  }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearFonts") ) { outValue = clearFonts_dyn(); return true;  }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"replaceColor") ) { outValue = replaceColor_dyn(); return true;  }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromAngelCode") ) { outValue = fromAngelCode_dyn(); return true;  }
		if (HX_FIELD_EQ(inName,"fromMonospace") ) { outValue = fromMonospace_dyn(); return true;  }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getDefaultFont") ) { outValue = getDefaultFont_dyn(); return true;  }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"COLOR_TRANSFORM") ) { outValue = COLOR_TRANSFORM; return true;  }
	}
	return false;
}

Dynamic BitmapFont_obj::__SetField(const ::String &inName,const Dynamic &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bold") ) { bold=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"italic") ) { italic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast< ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glyphs") ) { glyphs=inValue.Cast< ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fontName") ) { fontName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lineHeight") ) { lineHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minOffsetX") ) { minOffsetX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spaceWidth") ) { spaceWidth=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapFont_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"fonts") ) { fonts=ioValue.Cast< ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"POINT") ) { POINT=ioValue.Cast< ::openfl::geom::Point >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"MATRIX") ) { MATRIX=ioValue.Cast< ::openfl::geom::Matrix >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"COLOR_TRANSFORM") ) { COLOR_TRANSFORM=ioValue.Cast< ::openfl::geom::ColorTransform >(); return true; }
	}
	return false;
}

void BitmapFont_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("lineHeight","\xfb","\x02","\xf4","\xd6"));
	outFields->push(HX_HCSTRING("bold","\x85","\x81","\x1b","\x41"));
	outFields->push(HX_HCSTRING("italic","\xf0","\x2e","\x64","\x06"));
	outFields->push(HX_HCSTRING("fontName","\xba","\x8f","\x7d","\xcb"));
	outFields->push(HX_HCSTRING("minOffsetX","\xf3","\x55","\x1c","\x9d"));
	outFields->push(HX_HCSTRING("spaceWidth","\x60","\x8b","\x97","\x2b"));
	outFields->push(HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"));
	outFields->push(HX_HCSTRING("glyphs","\x47","\xf9","\x58","\xae"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BitmapFont_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsInt,(int)offsetof(BitmapFont_obj,lineHeight),HX_HCSTRING("lineHeight","\xfb","\x02","\xf4","\xd6")},
	{hx::fsBool,(int)offsetof(BitmapFont_obj,bold),HX_HCSTRING("bold","\x85","\x81","\x1b","\x41")},
	{hx::fsBool,(int)offsetof(BitmapFont_obj,italic),HX_HCSTRING("italic","\xf0","\x2e","\x64","\x06")},
	{hx::fsString,(int)offsetof(BitmapFont_obj,fontName),HX_HCSTRING("fontName","\xba","\x8f","\x7d","\xcb")},
	{hx::fsInt,(int)offsetof(BitmapFont_obj,minOffsetX),HX_HCSTRING("minOffsetX","\xf3","\x55","\x1c","\x9d")},
	{hx::fsInt,(int)offsetof(BitmapFont_obj,spaceWidth),HX_HCSTRING("spaceWidth","\x60","\x8b","\x97","\x2b")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(BitmapFont_obj,bitmap),HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(BitmapFont_obj,glyphs),HX_HCSTRING("glyphs","\x47","\xf9","\x58","\xae")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BitmapFont_obj::spaceCode,HX_HCSTRING("spaceCode","\x13","\x45","\x91","\x73")},
	{hx::fsInt,(void *) &BitmapFont_obj::tabCode,HX_HCSTRING("tabCode","\x22","\x86","\x3a","\x3a")},
	{hx::fsInt,(void *) &BitmapFont_obj::newLineCode,HX_HCSTRING("newLineCode","\xc1","\xeb","\xca","\xa3")},
	{hx::fsString,(void *) &BitmapFont_obj::defaultFontKey,HX_HCSTRING("defaultFontKey","\x4f","\x88","\x64","\xc5")},
	{hx::fsString,(void *) &BitmapFont_obj::defaultFontData,HX_HCSTRING("defaultFontData","\x7a","\x31","\xef","\xed")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &BitmapFont_obj::fonts,HX_HCSTRING("fonts","\xc4","\xb7","\x91","\x04")},
	{hx::fsString,(void *) &BitmapFont_obj::DEFAULT_GLYPHS,HX_HCSTRING("DEFAULT_GLYPHS","\x65","\x50","\x02","\x42")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &BitmapFont_obj::POINT,HX_HCSTRING("POINT","\x30","\xec","\x7d","\x44")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &BitmapFont_obj::MATRIX,HX_HCSTRING("MATRIX","\x41","\xe2","\x4a","\x6e")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(void *) &BitmapFont_obj::COLOR_TRANSFORM,HX_HCSTRING("COLOR_TRANSFORM","\x10","\x14","\x5c","\xf4")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String sMemberFields[] = {
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("lineHeight","\xfb","\x02","\xf4","\xd6"),
	HX_HCSTRING("bold","\x85","\x81","\x1b","\x41"),
	HX_HCSTRING("italic","\xf0","\x2e","\x64","\x06"),
	HX_HCSTRING("fontName","\xba","\x8f","\x7d","\xcb"),
	HX_HCSTRING("minOffsetX","\xf3","\x55","\x1c","\x9d"),
	HX_HCSTRING("spaceWidth","\x60","\x8b","\x97","\x2b"),
	HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"),
	HX_HCSTRING("glyphs","\x47","\xf9","\x58","\xae"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("addGlyphFrame","\x62","\x24","\x22","\x2f"),
	HX_HCSTRING("prepareGlyphs","\x2e","\x5e","\x9f","\x74"),
	::String(null()) };

static void sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapFont_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::spaceCode,"spaceCode");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::tabCode,"tabCode");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::newLineCode,"newLineCode");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::defaultFontKey,"defaultFontKey");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::defaultFontData,"defaultFontData");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::fonts,"fonts");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::DEFAULT_GLYPHS,"DEFAULT_GLYPHS");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::POINT,"POINT");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::MATRIX,"MATRIX");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::COLOR_TRANSFORM,"COLOR_TRANSFORM");
};

#ifdef HXCPP_VISIT_ALLOCS
static void sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::spaceCode,"spaceCode");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::tabCode,"tabCode");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::newLineCode,"newLineCode");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::defaultFontKey,"defaultFontKey");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::defaultFontData,"defaultFontData");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::fonts,"fonts");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::DEFAULT_GLYPHS,"DEFAULT_GLYPHS");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::POINT,"POINT");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::MATRIX,"MATRIX");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::COLOR_TRANSFORM,"COLOR_TRANSFORM");
};

#endif

hx::Class BitmapFont_obj::__mClass;

static ::String sStaticFields[] = {
	HX_HCSTRING("spaceCode","\x13","\x45","\x91","\x73"),
	HX_HCSTRING("tabCode","\x22","\x86","\x3a","\x3a"),
	HX_HCSTRING("newLineCode","\xc1","\xeb","\xca","\xa3"),
	HX_HCSTRING("defaultFontKey","\x4f","\x88","\x64","\xc5"),
	HX_HCSTRING("defaultFontData","\x7a","\x31","\xef","\xed"),
	HX_HCSTRING("fonts","\xc4","\xb7","\x91","\x04"),
	HX_HCSTRING("store","\xe1","\x13","\x16","\x84"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clearFonts","\xf7","\xf6","\x9b","\xd9"),
	HX_HCSTRING("getDefaultFont","\x3a","\xaa","\x1d","\x9d"),
	HX_HCSTRING("DEFAULT_GLYPHS","\x65","\x50","\x02","\x42"),
	HX_HCSTRING("POINT","\x30","\xec","\x7d","\x44"),
	HX_HCSTRING("MATRIX","\x41","\xe2","\x4a","\x6e"),
	HX_HCSTRING("COLOR_TRANSFORM","\x10","\x14","\x5c","\xf4"),
	HX_HCSTRING("fromAngelCode","\xc4","\xcc","\x21","\x6e"),
	HX_HCSTRING("fromXNA","\x61","\x23","\x06","\x58"),
	HX_HCSTRING("replaceColor","\x8f","\x5c","\xeb","\x3d"),
	HX_HCSTRING("fromMonospace","\xf9","\x0e","\xcf","\xd2"),
	::String(null()) };

void BitmapFont_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.bitmapFont.BitmapFont","\x80","\xa0","\x33","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapFont_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapFont_obj::__SetStatic;
	__mClass->mMarkFunc = sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapFont_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = sStaticStorageInfo;
#endif
	hx::RegisterClass(__mClass->mName, __mClass);
}

void BitmapFont_obj::__boot()
{
	spaceCode= (int)32;
	tabCode= (int)9;
	newLineCode= (int)10;
	defaultFontKey= HX_HCSTRING("defaultFontKey","\x4f","\x88","\x64","\xc5");
	defaultFontData= HX_HCSTRING(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000","\xb9","\xed","\x10","\x8a");
struct _Function_0_1{
	inline static ::haxe::ds::StringMap Block( ){
		HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","haxegon/bitmapFont/BitmapFont.hx",29,0x0e43809e)
		{
			HX_STACK_LINE(29)
			::haxe::ds::StringMap tmp = ::haxe::ds::StringMap_obj::__new();		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(29)
			::haxe::ds::StringMap tmp1 = tmp;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(29)
			return tmp1;
		}
		return null();
	}
};
	fonts= _Function_0_1::Block();
	DEFAULT_GLYPHS= HX_HCSTRING(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~","\x6f","\x61","\x48","\x0a");
	POINT= ::openfl::geom::Point_obj::__new(null(),null());
	MATRIX= ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
	COLOR_TRANSFORM= ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
}

} // end namespace haxegon
} // end namespace bitmapFont
